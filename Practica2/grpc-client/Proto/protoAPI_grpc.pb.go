// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protoAPI

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalAPIClient is the client API for LocalAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalAPIClient interface {
	StartGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResult, error)
}

type localAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalAPIClient(cc grpc.ClientConnInterface) LocalAPIClient {
	return &localAPIClient{cc}
}

func (c *localAPIClient) StartGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResult, error) {
	out := new(GameResult)
	err := c.cc.Invoke(ctx, "/protoAPI.localAPI/startGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalAPIServer is the server API for LocalAPI service.
// All implementations must embed UnimplementedLocalAPIServer
// for forward compatibility
type LocalAPIServer interface {
	StartGame(context.Context, *GameRequest) (*GameResult, error)
	mustEmbedUnimplementedLocalAPIServer()
}

// UnimplementedLocalAPIServer must be embedded to have forward compatible implementations.
type UnimplementedLocalAPIServer struct {
}

func (UnimplementedLocalAPIServer) StartGame(context.Context, *GameRequest) (*GameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedLocalAPIServer) mustEmbedUnimplementedLocalAPIServer() {}

// UnsafeLocalAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalAPIServer will
// result in compilation errors.
type UnsafeLocalAPIServer interface {
	mustEmbedUnimplementedLocalAPIServer()
}

func RegisterLocalAPIServer(s grpc.ServiceRegistrar, srv LocalAPIServer) {
	s.RegisterService(&LocalAPI_ServiceDesc, srv)
}

func _LocalAPI_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalAPIServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoAPI.localAPI/startGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalAPIServer).StartGame(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalAPI_ServiceDesc is the grpc.ServiceDesc for LocalAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoAPI.localAPI",
	HandlerType: (*LocalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "startGame",
			Handler:    _LocalAPI_StartGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoAPI.proto",
}
