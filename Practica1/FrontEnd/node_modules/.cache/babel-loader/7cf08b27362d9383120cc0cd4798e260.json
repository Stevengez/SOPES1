{"ast":null,"code":"var _jsxFileName = \"/home/stevengez/Documentos/GitHub/SOPES1/Practica1/FrontEnd/src/Components/Records.js\";\nimport React, { Component } from 'react';\nimport DataTable from 'react-data-table-component';\nimport { API_SERVER, API_PORT } from '../Config/credentials';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  name: 'Timestamp',\n  selector: row => row.timestamp\n}, {\n  name: 'Left',\n  selector: row => row.left\n}, {\n  name: 'Right',\n  selector: row => row.right\n}, {\n  name: 'Operations',\n  selector: row => row.operator\n}, {\n  name: 'Result',\n  selector: '10'\n}];\nexport default class Records extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: []\n    };\n\n    this.getRecordsFromAPI = async () => {\n      const requestOptions = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await fetch(`${API_SERVER}:${API_PORT}/getRecords/`, requestOptions);\n      const result = await response.json();\n      return result;\n    };\n\n    this.addLocalOperation = newOperation => {};\n\n    this.getRecordsFromAPI().then(result => {\n      let opList = [];\n      result.forEach(item => {\n        opList.push({\n          left: item.left,\n          right: item.right,\n          operator: item.operator,\n          timestamp: item.timestamp\n        });\n        console.log(opList[0]);\n        this.setState({\n          data: opList\n        });\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.props.setLocalHandler(this.addLocalOperation);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        columns: this.columns,\n        data: this.state.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/stevengez/Documentos/GitHub/SOPES1/Practica1/FrontEnd/src/Components/Records.js"],"names":["React","Component","DataTable","API_SERVER","API_PORT","columns","name","selector","row","timestamp","left","right","operator","Records","constructor","state","data","getRecordsFromAPI","requestOptions","method","headers","response","fetch","result","json","addLocalOperation","newOperation","then","opList","forEach","item","push","console","log","setState","componentDidMount","props","setLocalHandler","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,uBAArC;;AAEA,MAAMC,OAAO,GAAG,CACZ;AACIC,EAAAA,IAAI,EAAE,WADV;AAEIC,EAAAA,QAAQ,EAAEC,GAAG,IAAIA,GAAG,CAACC;AAFzB,CADY,EAKZ;AACIH,EAAAA,IAAI,EAAE,MADV;AAEIC,EAAAA,QAAQ,EAAEC,GAAG,IAAIA,GAAG,CAACE;AAFzB,CALY,EASZ;AACIJ,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,QAAQ,EAAEC,GAAG,IAAIA,GAAG,CAACG;AAFzB,CATY,EAaZ;AACIL,EAAAA,IAAI,EAAE,YADV;AAEIC,EAAAA,QAAQ,EAAEC,GAAG,IAAIA,GAAG,CAACI;AAFzB,CAbY,EAiBZ;AACIN,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,QAAQ,EAAE;AAFd,CAjBY,CAAhB;AAwBA,eAAe,MAAMM,OAAN,SAAsBZ,SAAtB,CAAgC;AAM3Ca,EAAAA,WAAW,GAAE;AACT;AADS,SAJbC,KAIa,GAJL;AACJC,MAAAA,IAAI,EAAE;AADF,KAIK;;AAAA,SA4BbC,iBA5Ba,GA4BO,YAAY;AAC5B,YAAMC,cAAc,GAAG;AACnBC,QAAAA,MAAM,EAAE,KADW;AAEnBC,QAAAA,OAAO,EAAE;AAAE,0BAAe;AAAjB;AAFU,OAAvB;AAKA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEnB,UAAW,IAAGC,QAAS,cAA3B,EAA0Cc,cAA1C,CAA5B;AACA,YAAMK,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACA,aAAOD,MAAP;AACH,KArCY;;AAAA,SAuCbE,iBAvCa,GAuCQC,YAAD,IAAkB,CAErC,CAzCY;;AAET,SAAKT,iBAAL,GAAyBU,IAAzB,CAA+BJ,MAAD,IAAY;AACtC,UAAIK,MAAM,GAAG,EAAb;AACAL,MAAAA,MAAM,CAACM,OAAP,CAAgBC,IAAD,IAAU;AAErBF,QAAAA,MAAM,CAACG,IAAP,CAAY;AACRrB,UAAAA,IAAI,EAAEoB,IAAI,CAACpB,IADH;AAERC,UAAAA,KAAK,EAAEmB,IAAI,CAACnB,KAFJ;AAGRC,UAAAA,QAAQ,EAAEkB,IAAI,CAAClB,QAHP;AAIRH,UAAAA,SAAS,EAAEqB,IAAI,CAACrB;AAJR,SAAZ;AAOAuB,QAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAAC,CAAD,CAAlB;AAEA,aAAKM,QAAL,CAAc;AACVlB,UAAAA,IAAI,EAAEY;AADI,SAAd;AAGH,OAdD;AAeH,KAjBD;AAkBH;;AAIDO,EAAAA,iBAAiB,GAAE;AACf,SAAKC,KAAL,CAAWC,eAAX,CAA2B,KAAKZ,iBAAhC;AACH;;AAiBDa,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,6BACI,QAAC,SAAD;AAAW,QAAA,OAAO,EAAE,KAAKjC,OAAzB;AAAkC,QAAA,IAAI,EAAE,KAAKU,KAAL,CAAWC;AAAnD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAvD0C","sourcesContent":["import React, {Component} from 'react';\nimport DataTable from 'react-data-table-component';\nimport { API_SERVER, API_PORT } from '../Config/credentials';\n\nconst columns = [\n    {\n        name: 'Timestamp',\n        selector: row => row.timestamp\n    },\n    {\n        name: 'Left',\n        selector: row => row.left\n    },\n    {\n        name: 'Right',\n        selector: row => row.right\n    },\n    {\n        name: 'Operations',\n        selector: row => row.operator\n    },\n    {\n        name: 'Result',\n        selector: '10'\n    },\n    \n];\n\nexport default class Records extends Component {\n\n    state = {\n        data: []\n    };\n\n    constructor(){\n        super();\n        this.getRecordsFromAPI().then((result) => {\n            let opList = [];\n            result.forEach((item) => {\n\n                opList.push({\n                    left: item.left,\n                    right: item.right,\n                    operator: item.operator,\n                    timestamp: item.timestamp\n                });\n\n                console.log(opList[0]);\n\n                this.setState({\n                    data: opList\n                });\n            });\n        });\n    }\n\n\n\n    componentDidMount(){\n        this.props.setLocalHandler(this.addLocalOperation);\n    }\n\n    getRecordsFromAPI = async () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: { 'Content-Type':'application/json'}\n        }\n\n        const response = await fetch(`${API_SERVER}:${API_PORT}/getRecords/`, requestOptions);\n        const result = await response.json();\n        return result;\n    }\n\n    addLocalOperation = (newOperation) => {\n                                \n    }\n\n    render(){\n        return(\n            <div>\n                <DataTable columns={this.columns} data={this.state.data}/>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}