{"ast":null,"code":"var _jsxFileName = \"/home/stevengez/Documentos/GitHub/SOPES1/Practica1/FrontEnd/src/Components/Records.js\";\nimport React, { Component } from 'react';\nimport simpletime from 'simpletime';\nimport DataTable from 'react-data-table-component';\nimport { API_SERVER, API_PORT } from '../Config/credentials';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Records extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n\n    this.getRecordsFromAPI = async () => {\n      const requestOptions = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await fetch(`${API_SERVER}:${API_PORT}/getRecords/`, requestOptions);\n      const result = await response.json();\n      return result;\n    };\n\n    this.addLocalOperation = newOperation => {\n      console.log(this.state.data);\n    };\n\n    this.columns = [{\n      name: 'Timestamp',\n      minWidth: 10,\n      selector: row => simpletime.applyFormatDate(row.timestamp, \"dd/MM/yyyy h:mm\")\n    }, {\n      name: 'Left',\n      maxWidth: 10,\n      selector: row => row.left\n    }, {\n      name: 'Right',\n      maxWidth: 10,\n      selector: row => row.right\n    }, {\n      name: 'Operations',\n      maxWidth: 70,\n      selector: row => row.operator\n    }, {\n      name: 'Result',\n      selector: row => {\n        switch (row.operator) {\n          case \"+\":\n            return (row.left + row.right).toString();\n\n          case \"-\":\n            return (row.left - row.right).toString();\n\n          case \"*\":\n            return (row.left * row.right).toString();\n\n          case \"/\":\n            return (row.left / row.right).toString();\n\n          default:\n            return \"Syntax Error\";\n        }\n      }\n    }];\n    this.getRecordsFromAPI().then(result => {\n      let opList = [];\n      result.forEach(item => {\n        opList.push({\n          left: item.left,\n          right: item.right,\n          operator: item.operator,\n          timestamp: item.timestamp\n        });\n      });\n      this.setState({\n        data: opList\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.props.setLocalHandler(this.addLocalOperation);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        pagination: true,\n        columns: this.columns,\n        data: this.state.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/stevengez/Documentos/GitHub/SOPES1/Practica1/FrontEnd/src/Components/Records.js"],"names":["React","Component","simpletime","DataTable","API_SERVER","API_PORT","Records","constructor","props","state","data","getRecordsFromAPI","requestOptions","method","headers","response","fetch","result","json","addLocalOperation","newOperation","console","log","columns","name","minWidth","selector","row","applyFormatDate","timestamp","maxWidth","left","right","operator","toString","then","opList","forEach","item","push","setState","componentDidMount","setLocalHandler","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport simpletime from 'simpletime';\nimport DataTable from 'react-data-table-component';\nimport { API_SERVER, API_PORT } from '../Config/credentials';\n\n\n\nexport default class Records extends Component {\n\n    state = {\n        data: []\n    };\n\n    constructor(props){\n        super(props);\n\n        this.columns = [\n            {\n                name: 'Timestamp',\n                minWidth: 10,\n                selector: row => simpletime.applyFormatDate(row.timestamp, \"dd/MM/yyyy h:mm\")\n            },\n            {\n                name: 'Left',\n                maxWidth: 10,\n                selector: row => row.left\n            },\n            {\n                name: 'Right',\n                maxWidth: 10,\n                selector: row => row.right\n            },\n            {\n                name: 'Operations',\n                maxWidth: 70,\n                selector: row => row.operator\n            },\n            {\n                name: 'Result',\n                selector: row => {\n                    switch(row.operator){\n                        case \"+\":\n                            return (row.left+row.right).toString();\n                        case \"-\":\n                            return (row.left-row.right).toString();\n                        case \"*\":\n                            return (row.left*row.right).toString();\n                        case \"/\":\n                            return (row.left/row.right).toString();\n                        default:\n                            return \"Syntax Error\";\n                    }\n                }\n            },\n            \n        ];\n\n        this.getRecordsFromAPI().then((result) => {\n            let opList = [];\n            result.forEach((item) => {\n                opList.push({\n                    left: item.left,\n                    right: item.right,\n                    operator: item.operator,\n                    timestamp: item.timestamp\n                });\n            });\n\n            this.setState({\n                data: opList\n              });\n        });\n    }\n\n\n\n    componentDidMount(){\n        this.props.setLocalHandler(this.addLocalOperation);\n    }\n\n    getRecordsFromAPI = async () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: { 'Content-Type':'application/json'}\n        }\n\n        const response = await fetch(`${API_SERVER}:${API_PORT}/getRecords/`, requestOptions);\n        const result = await response.json();\n        return result;\n    }\n\n    addLocalOperation = (newOperation) => {\n        console.log(this.state.data);\n                                \n    }\n\n    render(){\n        return(\n            <div>\n                <DataTable pagination columns={this.columns} data={this.state.data}/>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}