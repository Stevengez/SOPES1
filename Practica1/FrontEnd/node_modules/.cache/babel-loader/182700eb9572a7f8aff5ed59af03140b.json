{"ast":null,"code":"var _jsxFileName = \"/home/stevengez/Documentos/GitHub/SOPES1/Practica1/FrontEnd/src/Components/Records.js\";\nimport React, { Component } from 'react';\nimport DataTable from 'react-data-table-component';\nimport { API_SERVER, API_PORT } from '../Config/credentials';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Records extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n\n    this.getRecordsFromAPI = async () => {\n      const requestOptions = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await fetch(`${API_SERVER}:${API_PORT}/getRecords/`, requestOptions);\n      const result = await response.json();\n      return result;\n    };\n\n    this.addLocalOperation = newOperation => {\n      console.log(this.state.data);\n    };\n\n    this.columns = [{\n      name: 'Title',\n      selector: row => row.title\n    }, {\n      name: 'Year',\n      selector: row => row.year\n    }];\n    this.data1 = [{\n      id: 1,\n      title: 'Beetlejuice',\n      year: '1988'\n    }, {\n      id: 2,\n      title: 'Ghostbusters',\n      year: '1984'\n    }];\n    this.getRecordsFromAPI().then(result => {\n      let opList = [];\n      result.forEach(item => {\n        opList.push({\n          left: item.left,\n          right: item.right,\n          operator: item.operator,\n          timestamp: item.timestamp\n        }); //this.setState({\n        //  data: opList\n        //});\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.props.setLocalHandler(this.addLocalOperation);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        columns: this.columns,\n        data: this.data1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/stevengez/Documentos/GitHub/SOPES1/Practica1/FrontEnd/src/Components/Records.js"],"names":["React","Component","DataTable","API_SERVER","API_PORT","Records","constructor","props","state","data","getRecordsFromAPI","requestOptions","method","headers","response","fetch","result","json","addLocalOperation","newOperation","console","log","columns","name","selector","row","title","year","data1","id","then","opList","forEach","item","push","left","right","operator","timestamp","componentDidMount","setLocalHandler","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,uBAArC;;AAEA,eAAe,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAM3CK,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AADc,SAJlBC,KAIkB,GAJV;AACJC,MAAAA,IAAI,EAAE;AADF,KAIU;;AAAA,SAmDlBC,iBAnDkB,GAmDE,YAAY;AAC5B,YAAMC,cAAc,GAAG;AACnBC,QAAAA,MAAM,EAAE,KADW;AAEnBC,QAAAA,OAAO,EAAE;AAAE,0BAAe;AAAjB;AAFU,OAAvB;AAKA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEZ,UAAW,IAAGC,QAAS,cAA3B,EAA0CO,cAA1C,CAA5B;AACA,YAAMK,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACA,aAAOD,MAAP;AACH,KA5DiB;;AAAA,SA8DlBE,iBA9DkB,GA8DGC,YAAD,IAAkB;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAL,CAAWC,IAAvB;AAEH,KAjEiB;;AAGd,SAAKa,OAAL,GAAe,CACX;AACIC,MAAAA,IAAI,EAAE,OADV;AAEIC,MAAAA,QAAQ,EAAEC,GAAG,IAAIA,GAAG,CAACC;AAFzB,KADW,EAKX;AACIH,MAAAA,IAAI,EAAE,MADV;AAEIC,MAAAA,QAAQ,EAAEC,GAAG,IAAIA,GAAG,CAACE;AAFzB,KALW,CAAf;AAWA,SAAKC,KAAL,GAAa,CACT;AACIC,MAAAA,EAAE,EAAE,CADR;AAEIH,MAAAA,KAAK,EAAE,aAFX;AAGIC,MAAAA,IAAI,EAAE;AAHV,KADS,EAMT;AACIE,MAAAA,EAAE,EAAE,CADR;AAEIH,MAAAA,KAAK,EAAE,cAFX;AAGIC,MAAAA,IAAI,EAAE;AAHV,KANS,CAAb;AAaA,SAAKjB,iBAAL,GAAyBoB,IAAzB,CAA+Bd,MAAD,IAAY;AACtC,UAAIe,MAAM,GAAG,EAAb;AACAf,MAAAA,MAAM,CAACgB,OAAP,CAAgBC,IAAD,IAAU;AAErBF,QAAAA,MAAM,CAACG,IAAP,CAAY;AACRC,UAAAA,IAAI,EAAEF,IAAI,CAACE,IADH;AAERC,UAAAA,KAAK,EAAEH,IAAI,CAACG,KAFJ;AAGRC,UAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAHP;AAIRC,UAAAA,SAAS,EAAEL,IAAI,CAACK;AAJR,SAAZ,EAFqB,CASrB;AACE;AACF;AACH,OAZD;AAaH,KAfD;AAgBH;;AAIDC,EAAAA,iBAAiB,GAAE;AACf,SAAKhC,KAAL,CAAWiC,eAAX,CAA2B,KAAKtB,iBAAhC;AACH;;AAkBDuB,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,6BACI,QAAC,SAAD;AAAW,QAAA,OAAO,EAAE,KAAKnB,OAAzB;AAAkC,QAAA,IAAI,EAAE,KAAKM;AAA7C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AA/E0C","sourcesContent":["import React, {Component} from 'react';\nimport DataTable from 'react-data-table-component';\nimport { API_SERVER, API_PORT } from '../Config/credentials';\n\nexport default class Records extends Component {\n\n    state = {\n        data: []\n    };\n\n    constructor(props){\n        super(props);\n\n        this.columns = [\n            {\n                name: 'Title',\n                selector: row => row.title,\n            },\n            {\n                name: 'Year',\n                selector: row => row.year,\n            },\n        ];\n        \n        this.data1 = [\n            {\n                id: 1,\n                title: 'Beetlejuice',\n                year: '1988',\n            },\n            {\n                id: 2,\n                title: 'Ghostbusters',\n                year: '1984',\n            },\n        ]\n\n        this.getRecordsFromAPI().then((result) => {\n            let opList = [];\n            result.forEach((item) => {\n\n                opList.push({\n                    left: item.left,\n                    right: item.right,\n                    operator: item.operator,\n                    timestamp: item.timestamp\n                });\n\n                //this.setState({\n                  //  data: opList\n                //});\n            });\n        });\n    }\n\n\n\n    componentDidMount(){\n        this.props.setLocalHandler(this.addLocalOperation);\n    }\n\n    getRecordsFromAPI = async () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: { 'Content-Type':'application/json'}\n        }\n\n        const response = await fetch(`${API_SERVER}:${API_PORT}/getRecords/`, requestOptions);\n        const result = await response.json();\n        return result;\n    }\n\n    addLocalOperation = (newOperation) => {\n        console.log(this.state.data);\n                                \n    }\n\n    render(){\n        return(\n            <div>\n                <DataTable columns={this.columns} data={this.data1}/>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}